PREFIX skos:    <http://www.w3.org/2004/02/skos/core#>
PREFIX dc: 		<http://purl.org/dc/elements/1.1/>  
PREFIX skos: 	<http://www.w3.org/2004/02/skos/core#>
PREFIX snomed:  <http://purl.bioontology.org/ontology/SNOMEDCT/>
PREFIX : 		<http://data.dzl.de/ont/dwh#>
PREFIX rdf:		<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: 	<http://www.w3.org/2002/07/owl#>
PREFIX foaf: 	<http://xmlns.com/foaf/0.1/>
PREFIX xsd:		<http://www.w3.org/2001/XMLSchema#>
PREFIX dc: 		<http://purl.org/dc/elements/1.1/>
PREFIX dwh:    	<http://sekmi.de/histream/dwh#>
PREFIX loinc: 	<http://loinc.org/owl#>
PREFIX rdfs:	<http://www.w3.org/2000/01/rdf-schema#>
PREFIX prov: 	<http://www.w3.org/ns/prov#>
PREFIX cs:		<http://purl.org/vocab/changeset/schema#>

INSERT
{
	?commit prov:startedAtTime ?startdate
}
WHERE
{
	{
		SELECT ?commit ?author (MAX(?date) as ?startdate) ?enddate
		WHERE
		{
			{
				SELECT ?commit ?author ?enddate
				WHERE
				{
					?commit a prov:Activity ;
						prov:wasAssociatedWith ?author ;
						prov:endedAtTime ?enddate ;
					.
				}
			}
			?commit2 a prov:Activity ;
				prov:wasAssociatedWith ?author ;
				prov:endedAtTime ?date ;
			.
			filter (?date < ?enddate)
		}
		GROUP BY ?commit ?author ?enddate
		ORDER BY ?enddate
	}
};

INSERT
{
	?concept a prov:Entity .
	?commit prov:used ?concept . 
	?commit prov:generated [ a prov:Entity; prov:specializationOf :ontology ] .
}
WHERE
{
	{
		SELECT ?commit ?concept
		WHERE
		{
			?commit prov:qualifiedUsage [ ?action [ rdf:Statement [ rdf:subject ?concept ] ] ]
		}
	}
};

INSERT
{
	?commit prov:generated [ a prov:Entity; prov:specializationOf :ontology ];
}
WHERE
{
	?commit a prov:Activity;
};

#link concept derivation to proper commit
INSERT
{
	?rightcs cs:addition [ a rdf:Statement;
		rdf:subject ?derivedConcept;
		rdf:predicate prov:wasDerivedFrom;
		rdf:object ?oldConcept
	] .
	?st rdf:comment "hidden" .
}
WHERE
{		
	{
		SELECT ?falsecommit ?falseadd ?st ?derivedConcept ?oldConcept
		WHERE
		{
			?falsecommit prov:qualifiedUsage [ cs:addition ?st ] .
			?st a rdf:Statement;
				rdf:subject ?derivedConcept;
				rdf:predicate prov:wasDerivedFrom;
				rdf:object ?oldConcept .
		}
	}
		
	?rightcommit prov:qualifiedUsage ?rightcs .
	?rightcs cs:addition ?add;	
		cs:removal ?rem .
	?add a rdf:Statement;
		rdf:subject ?derivedConcept;
		rdf:predicate rdf:type;
		rdf:object ?object .
	?rem a rdf:Statement;
		rdf:subject ?oldConcept;
		rdf:predicate rdf:type;
		rdf:object ?object .
		
	FILTER (?falsecommit != ?rightcommit)
};

#all statements previously targeting the old concept and now targeting the derived concept in exact the same relation are marked as derived
INSERT
{
	?add rdf:comment "hidden" .
	?rem rdf:comment "hidden" .
}
WHERE
{
	{
		SELECT ?derivedConcept ?oldConcept
		WHERE
		{
			?derivedConcept prov:wasDerivedFrom+ ?oldConcept .	
		}
	}

	?commit prov:qualifiedUsage [
		cs:addition ?add;	
		cs:removal ?rem
	] .
	?add a rdf:Statement;
		rdf:subject ?subject;
		rdf:predicate ?relation;
		rdf:object ?derivedConcept .
	?rem a rdf:Statement;
		rdf:subject ?subject;
		rdf:predicate ?relation;
		rdf:object ?oldConcept.
};
#it is possible that subject and object are both derived
INSERT
{
	?add rdf:comment "hidden" .
	?rem rdf:comment "hidden" .
}
WHERE
{
	{
		SELECT ?oldConcept1 ?derivedConcept1 ?oldConcept2 ?derivedConcept2
		WHERE
		{
			?derivedConcept1 prov:wasDerivedFrom ?oldConcept1 .	
			?derivedConcept2 prov:wasDerivedFrom ?oldConcept2 .	
		}
	}
	?add a rdf:Statement;
		rdf:subject ?derivedConcept1;
		rdf:predicate ?relation;
		rdf:object ?derivedConcept2.
		
	?rem a rdf:Statement;
		rdf:subject ?oldConcept1;
		rdf:predicate ?relation;
		rdf:object ?oldConcept2.	
	?commit prov:qualifiedUsage [
		cs:addition ?add;	
		cs:removal ?rem
	] .
};

#all derived attributing statements of the old concept are marked as derived
INSERT
{
	?add rdf:comment "hidden" .
	?rem rdf:comment "hidden" .
}
WHERE
{
	{
		SELECT ?oldConcept ?derivedConcept
		WHERE
		{
			?derivedConcept prov:wasDerivedFrom ?oldConcept .	
		}
	}

	?commit prov:qualifiedUsage [
		cs:addition ?add;	
		cs:removal ?rem
	] .
	?add a rdf:Statement;
		rdf:subject ?derivedConcept;
		rdf:predicate ?relation;
		rdf:object ?object.
	?rem a rdf:Statement;
		rdf:subject ?oldConcept;
		rdf:predicate ?relation;
		rdf:object ?object.
};

#all statements with an old concept as subject are linked to the new concept
#in case of re-introduced concepts, we only want to link the statements before derivation
INSERT
{
	?commit prov:qualifiedUsage [
		?addorremove [
			a rdf:Statement;
			rdf:subject ?derivedConcept;
			rdf:predicate ?p;
			rdf:object ?o
		]
	] .
	?oldstatement rdf:comment "hidden" .
}
WHERE
{
	{
		SELECT ?oldConcept ?derivedConcept ?derivedate
		WHERE
		{			
			?commit2 prov:qualifiedUsage ?usage2 ;
				prov:endedAtTime ?derivedate .
			?usage2 cs:addition [
				a rdf:Statement; 
				rdf:subject ?derivedConcept;
				rdf:predicate prov:wasDerivedFrom
			] .
			?derivedConcept prov:wasDerivedFrom+ ?oldConcept .	
		}
	}

	?commit prov:qualifiedUsage ?usage ;
		prov:endedAtTime ?changedate .
	?usage ?addorremove ?oldstatement .
	?oldstatement
		a rdf:Statement;
		rdf:subject ?oldConcept;
		rdf:predicate ?p;
		rdf:object ?o .
	
	FILTER (!bound(?derivedate) || ?changedate <= ?derivedate)
	
	FILTER NOT EXISTS {
		?commit prov:qualifiedUsage [
			?addorremove [
				a rdf:Statement;
				rdf:subject ?oldConcept;
				rdf:predicate ?p;
				rdf:object ?o;
				rdf:comment "hidden"
			]
		]	
	}
};

#narrower relations are derived from broader
INSERT
{
	?st rdf:comment "hidden" .
}
WHERE
{
	?st a rdf:Statement;
		rdf:predicate skos:narrower.
};

###invert relations
INSERT
{
	?a prov:influenced ?b .
}
WHERE
{
	?b prov:wasInfluencedBy ?a .
};

INSERT
{
	?site :uses ?concept .
	?siteshort a prov:Agent;
		prov:label ?siteshort_label ;
		:uses ?a .
}
WHERE
{
	?site :uses ?notation .
	?concept skos:notation ?notation ;
		skos:broader* [ rdf:partOf* [ skos:broader* ?c ] ] .
	?a skos:member* ?c .
	filter (?a != ?concept)
	bind(IRI(if(strbefore( str(?site), "_" ) != "", strbefore( str(?site), "_" ), str(?site))) as ?siteshort)
	bind(str(?siteshort) as ?siteshort_label)
};